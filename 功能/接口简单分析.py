from 功能.格式查找 import 蓝图内查找
from 蓝图格式 import 类型
from 蓝图格式.建筑 import 建筑, 建筑主导接口
from 蓝图格式.接口分析.单接口分析 import 建筑预览, 接口主导者, 单接口分析, 接口方向, 接口类型
from 蓝图格式.接口分析.多接口分析 import 多接口分析

# TODO:是仙术地基吗

class 分析辅助():
    def __init__(self, 输入):
        self.l_所有建筑 = 蓝图内查找(输入).所有建筑()

    def _添加主导建筑输入信息(self, 主导建筑: 建筑) -> None:
        输入接口 : 建筑主导接口 = 主导建筑.输入接口
        if 输入接口.为空():
            return
        l_主导接口序号: 类型.Int8  = 输入接口.自身接口
        l_被动接口序号: 类型.Int8  = 输入接口.目标接口
        l_链接建筑序号: 类型.Int32 = 输入接口.目标序号
        主导建筑.悠米_接口分析.添加分析(单接口分析(
            自身接口序号 = l_主导接口序号,
            目标接口序号 = l_被动接口序号,
            主导者 = 接口主导者.自身,
            链接方向 = 接口方向.目标流向自身,
            链接建筑 = 建筑预览.由建筑构造(self.l_所有建筑[l_链接建筑序号]),
            起点建筑 = 建筑预览.空预览(),
            终点建筑 = 建筑预览.空预览(),
            链接类型 = 接口类型.未知,
        ))

    def _添加被动建筑输入信息(self, 主导建筑: 建筑) -> None:
        输入接口: 建筑主导接口 = 主导建筑.输入接口
        if 输入接口.为空():
            return
        l_主导接口序号: 类型.Int8  = 输入接口.自身接口
        l_被动接口序号: 类型.Int8  = 输入接口.目标接口
        l_链接建筑序号: 类型.Int32 = 输入接口.目标序号
        被动建筑: 建筑 = self.l_所有建筑[l_链接建筑序号]
        被动建筑.悠米_接口分析.添加分析(单接口分析(
            自身接口序号 = l_被动接口序号,
            目标接口序号 = l_主导接口序号,
            主导者 = 接口主导者.目标,
            链接方向 = 接口方向.自身流向目标,
            链接建筑 = 建筑预览.由建筑构造(主导建筑),
            起点建筑 = 建筑预览.空预览(),
            终点建筑 = 建筑预览.空预览(),
            链接类型 = 接口类型.未知,
        ))

    def _添加主导建筑输出信息(self, 主导建筑: 建筑) -> None:
        输出接口 : 建筑主导接口 = 主导建筑.输出接口
        if 输出接口.为空():
            return
        l_主导接口序号: 类型.Int8  = 输出接口.自身接口
        l_被动接口序号: 类型.Int8  = 输出接口.目标接口
        l_链接建筑序号: 类型.Int32 = 输出接口.目标序号
        主导建筑.悠米_接口分析.添加分析(单接口分析(
            自身接口序号 = l_主导接口序号,
            目标接口序号 = l_被动接口序号,
            主导者 = 接口主导者.自身,
            链接方向 = 接口方向.自身流向目标,
            链接建筑 = 建筑预览.由建筑构造(self.l_所有建筑[l_链接建筑序号]),
            起点建筑 = 建筑预览.空预览(),
            终点建筑 = 建筑预览.空预览(),
            链接类型 = 接口类型.未知,
        ))

    def _添加被动建筑输出信息(self, 主导建筑: 建筑) -> None:
        输出接口: 建筑主导接口 = 主导建筑.输出接口
        if 输出接口.为空():
            return
        l_主导接口序号: 类型.Int8  = 输出接口.自身接口
        l_被动接口序号: 类型.Int8  = 输出接口.目标接口
        l_链接建筑序号: 类型.Int32 = 输出接口.目标序号
        被动建筑: 建筑 = self.l_所有建筑[l_链接建筑序号]
        被动建筑.悠米_接口分析.添加分析(单接口分析(
            自身接口序号 = l_被动接口序号,
            目标接口序号 = l_主导接口序号,
            主导者 = 接口主导者.目标,
            链接方向 = 接口方向.目标流向自身,
            链接建筑 = 建筑预览.由建筑构造(主导建筑),
            起点建筑 = 建筑预览.空预览(),
            终点建筑 = 建筑预览.空预览(),
            链接类型 = 接口类型.未知,
        ))

    def 分析主导建筑(self, 主导建筑: 建筑):
        self._添加主导建筑输入信息(主导建筑)
        self._添加被动建筑输入信息(主导建筑)
        self._添加主导建筑输出信息(主导建筑)
        self._添加被动建筑输出信息(主导建筑)

#todo:查重

    def 初始化(self) -> None:
        for 当前建筑 in self.l_所有建筑:
            当前建筑.悠米_接口分析 = 多接口分析()

    def 开始分析(self) -> None:
        self.初始化()
        for 当前建筑 in self.l_所有建筑:
            self.分析主导建筑(当前建筑)

    def 删除分析(self) -> None:
        self.初始化()


def 尝试接口分析(输入) -> None:
    分析辅助(输入 = 输入).开始分析()
