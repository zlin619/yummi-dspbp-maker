
from 功能.指鹿为马.通用 import 物品替换
from 功能.接口简单分析 import 分析辅助
from 功能.格式查找 import 蓝图内查找
import 日志
from 蓝图格式 import 类型
from 蓝图格式.图标 import 图标
from 蓝图格式.坐标 import 传送带姿态, 普通建筑姿态
from 蓝图格式.建筑 import 建筑, 建筑主导接口, 建筑类型分析
from 蓝图格式.接口分析.多接口分析 import 多接口分析
from 蓝图格式.额外参数 import 额外参数之空白
from 蓝图格式.模型 import 模型

日志.警告("仙术地基对于14和15号接口有毁坏作用,目前该技术问题仍无法解决")

# 这个文件的作用是, 添加仙术地基, 使建筑可以浮空建造
def 是仙术地基吗(当前建筑: 建筑):
    return 当前建筑.模型序号 == 模型("传送带") and 当前建筑.物品序号 == 图标("地基")

def 堆叠关系分析(蓝图或建筑群) -> tuple[bool, set[int]]:
    # 返回值1:是否需要仙术地基
    # 返回值2:所有仙术地基的序号
    是否需要仙术地基 = False
    所有建筑 = 蓝图内查找(蓝图或建筑群).所有建筑()
    仙术地基set = set()
    for 当前建筑 in 所有建筑:
        当前建筑类型 = 当前建筑.悠米_建筑类型

        if (当前建筑类型 == 建筑类型分析.待拆除
            or 当前建筑类型 == 建筑类型分析.浮空建筑
            or 当前建筑.模型序号.是分拣器吗()
            or 当前建筑.模型序号 == 模型("流速监测器")):
            continue
        elif 当前建筑.模型序号.是传送带吗():
            if 当前建筑.物品序号 == 图标("纯物品:地基"):
                当前建筑.悠米_建筑类型 = 建筑类型分析.仙术地基
                仙术地基set.add(当前建筑.建筑序号)
                是否需要仙术地基 = True
        if 当前建筑.物品序号.是分拣器吗():
            当前建筑高度=当前建筑.空间姿态.起点.高度Z
        else:
            当前建筑高度=当前建筑.空间姿态.高度Z
        if not -0.5 < 当前建筑高度 < 0.5:
            if 当前建筑.输入接口.目标序号 == -1:  # 没有支撑物
                当前建筑.悠米_建筑类型 = 建筑类型分析.浮空建筑
                是否需要仙术地基 = True
            else:
                当前建筑.悠米_建筑类型 = 建筑类型分析.堆叠建筑
    return 是否需要仙术地基, 仙术地基set

def 添加仙术地基(蓝图或建筑群) -> bool:
    # 返回值: 需要仙术地基/不需要
    所有建筑 = 蓝图内查找(蓝图或建筑群).所有建筑()
    分析辅助(所有建筑).开始分析()
    是否需要仙术地基, 所有仙术地基序号 = 堆叠关系分析(蓝图或建筑群)
    if 是否需要仙术地基 == False:
        return False
    for 当前建筑序号 in 所有仙术地基序号:
        物品替换(所有建筑[当前建筑序号]).拆()

    最后一个建筑 = 所有建筑[-1]
    if 最后一个建筑.建筑序号 in 所有仙术地基序号:
        # 抢救最后一个建筑为仙术地基
        物品替换(最后一个建筑).为("纯物品:地基")
        最后一个建筑.悠米_建筑类型 = 建筑类型分析.仙术地基
        仙术地基序号 = 最后一个建筑.建筑序号
    else:
        # 新建一个仙术地基
        仙术地基序号 = len(所有建筑)  # 自动递增序号
        新仙术地基 = 建筑(
            建筑序号=类型.Int32(仙术地基序号),
            区域序号=类型.Int8(0),
            物品序号=图标("地基"),
            模型序号=模型("传送带"),
            空间姿态=普通建筑姿态(0, 0, -10, 0),
            输出接口=建筑主导接口(-1, 14, 15, 0),
            输入接口=建筑主导接口(-1, 15, 14, 0),
            配方序号=类型.UInt16(0),
            过滤物品序号=图标("未定义"),
            额外参数=额外参数之空白(),
            悠米_接口分析=多接口分析(),
            悠米_建筑类型=建筑类型分析.仙术地基,
        )
        所有建筑.append(新仙术地基)

    for 当前建筑 in 所有建筑:
        if 当前建筑.悠米_建筑类型 == 建筑类型分析.浮空建筑:
            当前建筑.堆叠接口().目标序号 = 仙术地基序号
            当前建筑.堆叠接口().自身接口 = 15
            当前建筑.堆叠接口().目标接口 = 14
    return True
