from copy import deepcopy
from 功能.指鹿为马.通用 import 物品替换
from 功能.格式查找 import 蓝图内查找
import 日志
from 蓝图格式.图标 import 图标
from 蓝图格式.序号字典 import 图标与序号
from 蓝图格式.建筑 import 建筑, 建筑主导接口
from 蓝图格式.蓝图 import 蓝图
from 蓝图格式.额外参数 import 额外参数之传送带, 额外参数之空白


class _连接塔预览:
    建筑序号: int
    接口序号: int
    def __init__(self, 当前建筑: 建筑, 接口序号: int):
        self.建筑序号 = 当前建筑.建筑序号
        self.接口序号 = 接口序号
        if not 当前建筑.模型序号.是塔吗():
            日志.警告(f'传送带终点的建筑不是塔, 建筑序号{当前建筑.建筑序号}, 模型序号{当前建筑.模型序号}')


class _物流塔连接管理器:
    l_断开点转数字: dict[int, int]
    l_数字转连接塔: dict[int, int]
    l_断开点转连接塔: dict[int, int]
    所有建筑: list[建筑]

    def __init__(self, 蓝图或建筑群):
        self.l_断开点转数字 = {}
        self.l_数字转连接塔 = {}
        self.l_断开点转连接塔 = {}
        self.所有建筑 = 蓝图内查找(蓝图或建筑群).所有建筑()

    def 查找终点并拆除沿路(self, 当前建筑: 建筑, 接口序号=-1) -> _连接塔预览:
        if not 当前建筑.模型序号.是传送带吗():
            return _连接塔预览(当前建筑, 接口序号)
        下个建筑序号 = 当前建筑.输出接口.目标序号
        if 下个建筑序号 == -1:
            raise ValueError('传送带的终点是传送带')
        下个建筑 = self.所有建筑[下个建筑序号]
        接口序号 = 当前建筑.输出接口.目标接口
        物品替换(当前建筑).拆()
        return self.查找终点并拆除沿路(下个建筑, 接口序号)

    def 查找连接并拆除传送带(self) -> None:
        for 当前建筑 in self.所有建筑:
            if not 当前建筑.模型序号.是传送带吗():
                continue
            if not isinstance(当前建筑.额外参数, 额外参数之传送带):
                continue
            l_建筑序号: int = 当前建筑.建筑序号
            l_图标图案: 图标 = 当前建筑.额外参数.图标ID
            l_图标数字: int = int(当前建筑.额外参数.图标数字)
            if l_图标图案 == 图标('纯图标:需要重建'):
                l_终点建筑 = self.查找终点并拆除沿路(当前建筑)
                self.l_数字转连接塔[l_图标数字] = l_终点建筑
            elif l_图标图案 == 图标('纯图标:断开连接'):
                self.l_断开点转数字[l_建筑序号] = l_图标数字
                物品替换(当前建筑).拆()
            else:
                pass

    def 测算关系(self) -> None:
        print(self.l_断开点转数字)
        print(self.l_数字转连接塔)
        for 断开点_建筑序号, 图标数字 in self.l_断开点转数字.items():
            if 图标数字 in self.l_数字转连接塔:
                连接塔: _连接塔预览 = self.l_数字转连接塔[图标数字]
                self.l_断开点转连接塔[断开点_建筑序号] = 连接塔

    def 把接口连到塔里(self, 接口: 建筑主导接口) -> bool:
            连接塔预览: _连接塔预览 = self.l_断开点转连接塔[接口.目标序号]
            连接塔序号 = 连接塔预览.建筑序号
            连接塔: 建筑 = self.所有建筑[连接塔序号]
            for 当前接口序号 in range(12, 15): # 因为0-11是塔的接口最好别动,这个逻辑不兼容创生
                if 连接塔.悠米_接口分析.按自身接口查找(当前接口序号) == None:
                    接口.目标序号 = 连接塔.建筑序号
                    接口.目标接口 = 当前接口序号
                    return
            接口.目标序号 = 连接塔预览.建筑序号

    def 重连(self) -> None:
        for 当前建筑 in self.所有建筑:
            if not 当前建筑.模型序号.是分拣器吗():
                continue
            if 当前建筑.输入接口.目标序号 in self.l_断开点转连接塔:
                self.把接口连到塔里(当前建筑.输入接口)
            if 当前建筑.输出接口.目标序号 in self.l_断开点转连接塔:
                self.把接口连到塔里(当前建筑.输出接口)

# 五句话总结
# 如果有个分拣器本来连向(输入输出都算)"断开4021"
# 且有个传送带上标记位 "需要重建4021"
# 那么分拣器连向传送带终点的塔
# 并且把这根传送带拆了
# 其他数字同理
def 物流塔重连(蓝图或建筑群) -> None:
    l_连接管理器 = _物流塔连接管理器(蓝图或建筑群)
    l_连接管理器.查找连接并拆除传送带()
    l_连接管理器.测算关系()
    l_连接管理器.重连()
